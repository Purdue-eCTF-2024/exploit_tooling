// Acts as a fake component. If AP tries to boot, this looks like valid component
// Change i2c_id (last byte of component id) and component_id (the four bytes of id in reverse order)
// Assumes command structure and security of example implementation

#include <Wire.h>

const int ledPin = 13;
const int i2c_id = 0; // CHANGE ME
byte component_id[] = {0x00, 0x00, 0x00, 0x00}; // CHANGE ME

void setup() {
  Serial.begin(9600);
  pinMode(ledPin, OUTPUT);

  Wire.begin(i2c_id);
  Wire.setClock(100000);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);
}

void loop() {
}

void receiveEvent() {
  while (Wire.available()) {
    char receivedByte = Wire.read();
    Serial.print(receivedByte, HEX);
    Serial.print("\n");
  }
  flashLED();
}

int check = 1;
void requestEvent() {
  if (check == 1) {
    Serial.print("Sending 0x00\n");
    Wire.write(0x00);
    check = 2;
  } else if (check == 2) {
    Serial.print("Sending 0x04\n");
    Wire.write(0x04);
    check = 3;
  } else if (check == 3) {
    Serial.print("Sending component id\n");
    for (int i = 0; i < 4; i++) {
      Wire.write(component_id[i]);
    }
    check = 4;
  } else if (check == 4) {
    Serial.print("Sending 0x00\n");
    Wire.write(0x00);
    check = 5;
  } else if (check == 5) {
    Serial.print("Sending 0x09\n");
    Wire.write(0x09);
    check = 6;
  } else if (check == 6) {
    Serial.print("Sending 'I am boot'");
    Wire.write("I am boot");
    check = 1;
  }
}

void flashLED() {
  digitalWrite(ledPin, HIGH);
  delay(500);
  digitalWrite(ledPin, LOW);
}
