import argparse
import serial
from pwn import *

SEND = 0
RECV = 1

# This is a relay for talking to 2 components, intended for use in the black box scenario
class Relay:
    def __init__(self, comp_id):
        self.debug = False

        parser = argparse.ArgumentParser(
            prog="b01lers relay",
            description="Acts as a relay between the ap and component, allowing man in the middle attacks in a python script"
        )

        parser.add_argument(
            "-c1",
            "--component-one",
            required=True,
            help="The first component to talk to"
        )
        parser.add_argument(
            "-c2",
            "--component-two",
            required=True,
            help="The second component to talk to"
        )

        args = parser.parse_args()

        self.c1 = serial.Serial(
            port=args.component_one,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
        )

        self.c2 = serial.Serial(
            port=args.component_two,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
        )

        self.comp_id = comp_id

        # tell relays ids to talk to
        self.c1.write(p32(comp_id))
        self.c2.write(p32(comp_id))

    def recv(self, ser):
        ser.write(p8(RECV))
        len = u8(ser.read(size=1))
        return ser.read(size=len)

    def send(self, ser, data):
        ser.write(p8(SEND))
        ser.write(p8(len(data)))
        ser.write(data)

        # wait for ack byte
        _ack = ser.read(size=1)

    def recv_from_c1(self):
        out = self.recv(self.c1)

        if self.debug:
            print(f"from c1: {out}")

        return out

    def send_to_c1(self, data):
        if self.debug:
            print(f"to c1: {data}")

        self.send(self.c1, data)

    def recv_from_c2(self):
        out = self.recv(self.c2)

        if self.debug:
            print(f"from c2: {out}")

        return out

    def send_to_c2(self, data):
        if self.debug:
            print(f"to c2: {data}")

        self.send(self.c2, data)

# put your exploit code in this function
def exploit():
    relay = Relay(0x1111125)


if __name__ == "__main__":
    exploit()
