import argparse
import serial
import time
from pwn import *

SEND = 0
RECV = 1
SET_ID = 2

class RelayEndpoint:
    def __init__(self, device_path):
        self.serial = serial.Serial(
            port=device_path,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
        )

        # sleep a bit so serial has time to get going
        time.sleep(0.1)

    # used internally
    # takes in bytes
    def raw_write(self, data):
        self.serial.write(data)
        # serial will echo input back to us
        self.serial.read(size=len(data))

    # used internally
    # reads length bytes from the uart and returns them
    def raw_read(self, length):
        return self.serial.read(size=length)

    # recieves a message
    def recv(self):
        self.serial.reset_input_buffer()

        self.raw_write(p8(RECV))
        len = u8(self.raw_read(1))
        return self.raw_read(len)

    # sends the given message
    def send(self, data):
        self.serial.reset_input_buffer()

        self.raw_write(p8(SEND))
        self.raw_write(p8(len(data)))
        self.raw_write(data)

        # wait for ack byte
        _ack = self.raw_read(1)

    # sets the component id to immitate (if component relay) or to send to (if ap relay)
    def set_id(self, component_id):
        self.serial.reset_input_buffer()

        self.raw_write(p8(SET_ID))
        self.raw_write(p32(component_id))

        # wait for ack byte
        _ack = self.raw_read(1)

# This is a relay between an ap and a component
class Relay:
    def __init__(self, comp_id):
        self.debug = False

        parser = argparse.ArgumentParser(
            prog="b01lers relay",
            description="Acts as a relay between the ap and component, allowing man in the middle attacks in a python script"
        )

        parser.add_argument(
            "-a",
            "--application-processor",
            required=True,
            help="Serial device of AP relay (which talks to real component)"
        )
        parser.add_argument(
            "-c",
            '--component',
            required=True,
            help="Serial device of Component relay (which talks to real ap)"
        )

        args = parser.parse_args()

        self.ap = RelayEndpoint(args.application_processor)
        self.comp = RelayEndpoint(args.component)

        self.comp_id = comp_id

        # tell relays ids to talk to
        self.ap.set_id(comp_id)
        self.comp.set_id(comp_id)

    # receives bytes from the ap
    def recv_from_ap(self):
        out = self.comp.recv()

        if self.debug:
            print(f"from ap: {out}")

        return out

    # sends bytes from the ap
    def send_to_ap(self, data):
        if self.debug:
            print(f"to ap: {data}")

        self.comp.send(data)

    # receives bytes from the component
    def recv_from_comp(self):
        out = self.ap.recv()

        if self.debug:
            print(f"from c: {out}")

        return out

    # sends bytes from the component
    def send_to_comp(self, data):
        if self.debug:
            print(f"to c: {data}")
        self.ap.send(data)

    def forward_to_ap(self):
        data = self.ap.recv()

        if self.debug:
            printf(f"c -> ap: {data}")

        self.comp.send(data)

    def forward_to_comp(self):
        data = self.comp.recv()

        if self.debug:
            printf(f"ap -> c: {data}")

        self.ap.send(data)

# This is a relay for talking to 2 components, intended for use in the black box scenario
class CompRelay:
    def __init__(self, comp_id):
        self.debug = False

        parser = argparse.ArgumentParser(
            prog="b01lers relay",
            description="Acts as a relay between the ap and component, allowing man in the middle attacks in a python script"
        )

        parser.add_argument(
            "-c1",
            "--component-one",
            required=True,
            help="The first component to talk to"
        )
        parser.add_argument(
            "-c2",
            "--component-two",
            required=True,
            help="The second component to talk to"
        )

        args = parser.parse_args()

        self.c1 = RelayEndpoint(args.component_one)
        self.c2 = RelayEndpoint(args.component_two)

        self.comp_id = comp_id

        # tell relays ids to talk to
        self.c1.set_id(comp_id)
        self.c2.set_id(comp_id)

    def recv_from_c1(self):
        out = self.c1.recv()

        if self.debug:
            print(f"from c1: {out}")

        return out

    def send_to_c1(self, data):
        if self.debug:
            print(f"to c1: {data}")

        self.c1.send(data)

    def recv_from_c2(self):
        out = self.c2.recv()

        if self.debug:
            print(f"from c2: {out}")

        return out

    def send_to_c2(self, data):
        if self.debug:
            print(f"to c2: {data}")

        self.c2.send(data)
