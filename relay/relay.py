import argparse
import serial
from pwn import *

# put your exploit code in this function, it is given an instance of the relay
def exploit(relay):
    pass

SEND = 0
RECV = 1

class Relay:
    def __init__(self, ap_port, comp_port, comp_id):
        self.debug = False

        self.ap = serial.Serial(
            port=ap_port,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
        )

        self.comp = serial.Serial(
            port=comp_port,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
        )

        self.comp_id

        # tel ap relay id to talk to
        self.ap.write(p32(comp_id))

        # tell component relay its id
        self.comp.write(p32(comp_id))

    def recv(self, ser):
        ser.write(p8(RECV))
        len = u8(ser.read())

        out = b''
        for _ in range(len):
            out += ser.read()

        return out

    def send(self, ser, data):
        ser.write(p8(SEND))
        ser.write(p8(len(data)))
        ser.write(data)

        # wait for ack byte
        _ack = ser.read()

    # recieves bytes from the ap
    def recv_from_ap(self):
        out = self.recv(self.comp)

        if self.debug:
            print(f"from ap: {out}")

        return out

    # sends bytes from the ap
    def send_to_ap(self, data):
        if self.debug:
            print(f"to ap: {data}")

        self.send(self.comp, data)

    # recieves bytes from the component
    def recv_from_comp(self):
        out = self.recv(self.ap)

        if self.debug:
            print(f"from c: {out}")

        return out

    # sends bytes from the component
    def send_to_comp(self, data):
        if self.dabug:
            print(f"to c: {data}")
        self.send(self.ap, data)
        
# Main function
def main():
    parser = argparse.ArgumentParser(
        prog="b01lers relay",
        description="Acts as a relay between the ap and component, allowing man in the middle attacks in a python script",
    )

    parser.add_argument(
        "-a", "--application-processor", required=True, help="Serial device of AP relay (which talks to real component)",
        "-c", '--component', required=True, help="Serial device of Component relay (which talks to real ap)",
        "-i", "--cid", required=True, help="Id of the component we are acting as a relay between",
    )

    args = parser.parse_args()

    relay = Relay(args.application_processor, args.component, args.cid)
    exploit(relay)


if __name__ == "__main__":
    main()

